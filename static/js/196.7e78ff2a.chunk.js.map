{"version":3,"file":"static/js/196.7e78ff2a.chunk.js","mappings":"oNAMAA,OAAOC,WAAaC,kBAOpB,MAAMC,EAAW,CACfC,IAAK,yBAA0BC,IAAK,iE,oECTtC,MAAMC,EAAgBC,IAAAA,cAuBtB,EArBYC,IAAiC,IAAhC,aAAEC,KAAiBC,GAAOF,EACrC,OACIG,EAAAA,EAAAA,KAACC,EAAAA,WAAU,CAAAC,UACTF,EAAAA,EAAAA,KAACL,EAAa,IACNI,EACJI,MAAO,CACL,CACEC,IAAK,aACLC,KAAM,IACNC,MAAO,iBAGXC,OAAQT,EACRU,WAAYV,EAAaU,WACzBC,OAAQA,EAAAA,QACRC,UAAW,CAAEC,KAAM,WCjBzBC,EAAOC,EAAAA,WAAoBC,SAASC,eAAe,SAEtCC,WACjB,MAAMlB,OFSkBkB,WACxB,MAAMC,GAAOC,EAAAA,EAAAA,GAAW,CACtBC,aAAcC,GAASC,EAAAA,QAAQD,MAAMA,KAGjCE,EAAuB,IACxB9B,EAAU+B,OAAQ,kBAAmBC,eAAgB,SAgC1D,OA7BAC,EAAAA,EAAAA,QAAmB,CACjBC,QAAS,CACPC,QAASL,EAAsB,kBAAmBA,EAAsB,sBAAuB,IAC1F9B,EAAU+B,OAAQ,sBAAuBC,eAAgB,SAC3D,iBAEC,IACChC,EAAU+B,OAAQ,iBAAkBC,eAAgBjC,aAM7DqC,EAAAA,EAAAA,QAAY,CACVX,OAAMY,SAAS7B,EAAAA,EAAAA,KAAC8B,EAAAA,KAAI,CAACC,MAAO,IACPC,MAAO,CACLC,SAAU,WACVC,KAAM,MACNC,QAAS,OACTC,UAAW,sBACNhB,MAAO,KAAMiB,OAAOrC,EAAAA,EAAAA,KAACsC,EAAAA,MAAK,IAAKC,kBAAoBC,IAC7E,MAAM,KAAEC,GAASD,EAIjB,OAHAA,EAASC,KAAO,CACdC,KAAoB,IAAdD,EAAKC,KAAa,IAAMD,EAAKC,KAAMC,IAAKF,EAAKE,IAAKC,QAASH,EAAKA,MAEjED,KAIJ,CACLvB,OAAM4B,MAAO,CAAC,EAAGC,KAAM,CAAC,EAAGtC,WAAY,CACrCuC,aAAc,aEjDSC,GACpBpC,EAAKqC,QAAOjD,EAAAA,EAAAA,KAACkD,EAAG,CAAC1C,WAAYV,EAAaU,WAAYV,aAAcA,MAG7EqD,CAAWD,E,mFCRX,MA6KA,EA7KqB,CACjBE,KAAM,iBACNC,QAAS,+8EA2CTC,YAAa,iFACbC,YAAa,sBACbC,IAAK,o7EAqELC,QAAS,CACLC,QAAQ,EACRC,UAAW,uBACX3B,MAAO,uGAKP4B,KAAM,CAAC,CACXtD,MAAO,mDACPgD,YAAa,mDACbZ,KAAM,+vBA6BNmB,MAAO,CAAC,CACRT,KAAM,iBACNG,YAAa,kCACbO,gBAAiB,wDACjBC,UAAW,GACb,CACEX,KAAM,YACNG,YAAa,uBACbQ,UAAW,GACb,CACEX,KAAM,OACNG,YAAa,OACbQ,UAAW,O","sources":["preset.js","App.js","bootstrap.js","../../README.md"],"sourcesContent":["import React from 'react';\nimport { preset as fetchPreset } from '@kne/react-fetch';\nimport { Spin, Empty, message } from 'antd';\nimport createAjax from '@kne/axios-fetch';\nimport { preset as remoteLoaderPreset } from '@kne/remote-loader';\n\nwindow.PUBLIC_URL = process.env.PUBLIC_URL;\n\n// url: 'https://registry.npmmirror.com',\n// tpl: '{{url}}/@kne-components%2f{{remote}}/{{version}}/files/build',\n\n// url: 'https://cdn.jsdelivr.net', tpl: '{{url}}/npm/@kne-components/{{remote}}@{{version}}/build'\n\nconst registry = {\n  url: 'https://uc.fatalent.cn', tpl: '{{url}}/packages/@kne-components/{{remote}}/{{version}}/build'\n};\n\nexport const globalInit = async () => {\n  const ajax = createAjax({\n    errorHandler: error => message.error(error)\n  });\n\n  const componentsCoreRemote = {\n    ...registry, remote: 'components-core', defaultVersion: '0.4.3'\n  };\n\n  remoteLoaderPreset({\n    remotes: {\n      default: componentsCoreRemote, 'components-core': componentsCoreRemote, 'components-iconfont': {\n        ...registry, remote: 'components-iconfont', defaultVersion: '0.2.1'\n      }, 'captcha-sender': process.env.NODE_ENV === 'development' ? {\n        remote: 'captcha-sender', url: '/', tpl: '{{url}}'\n      } : {\n        ...registry, remote: 'captcha-sender', defaultVersion: process.env.DEFAULT_VERSION\n      }\n    }\n  });\n\n\n  fetchPreset({\n    ajax, loading: <Spin delay={500}\n                         style={{\n                           position: 'absolute',\n                           left: '50%',\n                           padding: '10px',\n                           transform: 'translateX(-50%)'\n                         }} />, error: null, empty: <Empty />, transformResponse: (response) => {\n      const { data } = response;\n      response.data = {\n        code: data.code === 0 ? 200 : data.code, msg: data.msg, results: data.data\n      };\n      return response;\n    }\n  });\n\n  return {\n    ajax, enums: {}, apis: {}, themeToken: {\n      colorPrimary: '#4183F0'\n    }\n  };\n};\n","import { HashRouter } from \"react-router-dom\";\nimport createEntry from \"@kne/modules-dev/dist/create-entry\";\nimport \"@kne/modules-dev/dist/create-entry.css\";\nimport readme from \"readme\";\n\nconst ExampleRoutes = createEntry.ExampleRoutes;\n\nconst App = ({ globalPreset, ...props }) => {\n  return (\n      <HashRouter>\n        <ExampleRoutes\n            {...props}\n            paths={[\n              {\n                key: \"components\",\n                path: \"/\",\n                title: \"首页\",\n              },\n            ]}\n            preset={globalPreset}\n            themeToken={globalPreset.themeToken}\n            readme={readme}\n            pageProps={{ menu: null }}\n        />\n      </HashRouter>\n  );\n};\n\nexport default App;\n","import { globalInit } from './preset';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst renderRoot = async (App) => {\n  const globalPreset = await globalInit();\n  return root.render(<App themeToken={globalPreset.themeToken} globalPreset={globalPreset} />);\n};\n\nrenderRoot(App);\n","import * as component_1 from '@kne/current-lib_captcha-sender';\nimport * as component_2 from '@kne/react-form-antd';\nimport '@kne/react-form-antd/dist/index.css';\nimport * as component_4 from 'antd';\nconst readmeConfig = {\n    name: `captcha-sender`,\n    summary: `<p><code>CaptchaSender</code> 是一个用于发送验证码的 React 组件，它提供了以下功能：</p>\n<ul>\n<li>与表单系统集成，可以根据表单字段的验证状态控制按钮的可用性</li>\n<li>发送验证码后自动开始倒计时</li>\n<li>在倒计时期间禁用按钮，并显示剩余时间</li>\n<li>支持自定义倒计时时长</li>\n<li>支持自定义按钮文本和样式</li>\n</ul>\n<h3>何时使用</h3>\n<p>当你需要在表单中添加发送验证码功能时，例如：</p>\n<ul>\n<li>用户注册或登录时发送手机验证码</li>\n<li>重置密码时发送邮箱验证码</li>\n<li>需要二次验证的操作</li>\n</ul>\n<h3>基本用法</h3>\n<pre><code class=\"language-jsx\">import CaptchaSender from '@kne/captcha-sender';\nimport Form, { Input } from '@kne/react-form-antd';\n\nconst MyForm = () =&gt; {\n  return (\n    &lt;Form&gt;\n      &lt;Input name=\"email\" label=\"邮箱\" realtime rule=\"REQ EMAIL\" /&gt;\n      &lt;CaptchaSender\n        target={{ name: 'email' }}\n        onClick={async () =&gt; {\n          // 发送验证码的异步操作\n          await sendVerificationCode();\n        }}\n      &gt;\n        发送验证码\n      &lt;/CaptchaSender&gt;\n      &lt;Input name=\"verificationCode\" label=\"验证码\" rule=\"REQ\" /&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre>\n<h3>注意事项</h3>\n<ul>\n<li><code>target</code> 属性用于指定要验证的表单字段，通常是手机号或邮箱字段</li>\n<li><code>onClick</code> 回调函数应返回一个 Promise，如果返回 <code>false</code>，则不会开始倒计时</li>\n<li>默认倒计时时长为 60 秒，可通过 <code>duration</code> 属性自定义</li>\n</ul>`,\n    description: `用于实现一个发送验证码按钮`,\n    packageName: `@kne/captcha-sender`,\n    api: `<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>按钮的内容</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>target</td>\n<td>目标表单字段，用于验证字段是否有效</td>\n<td>{ name: string } | { names: string[] }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击按钮时的回调函数，如果返回 false 则不会开始倒计时</td>\n<td>() =&gt; Promise&lt;any&gt; | false</td>\n<td>-</td>\n</tr>\n<tr>\n<td>duration</td>\n<td>倒计时时长（秒）</td>\n<td>number</td>\n<td>60</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>CSSProperties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>loadingProps</td>\n<td>LoadingButton 的属性</td>\n<td>LoadingButtonProps</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>说明</h3>\n<ol>\n<li>\n<p><code>target</code> 属性用于指定要验证的表单字段，可以是单个字段名或多个字段名的数组。组件会检查这些字段是否通过验证，如果没有通过验证，按钮将被禁用。</p>\n</li>\n<li>\n<p><code>onClick</code> 回调函数应返回一个 Promise，表示验证码发送操作。如果返回 <code>false</code>，则不会开始倒计时。</p>\n</li>\n<li>\n<p>当点击按钮并且 <code>onClick</code> 回调成功执行后，组件会自动开始倒计时，在倒计时期间按钮将被禁用，并显示剩余时间。</p>\n</li>\n<li>\n<p>组件继承了 <code>LoadingButton</code> 的所有属性，因此可以通过 <code>loadingProps</code> 传递 <code>LoadingButton</code> 的属性。</p>\n</li>\n</ol>`,\n    example: {\n        isFull: false,\n        className: `captcha_sender_e3d79`,\n        style: `.captcha_sender_e3d79 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { default: CaptchaSender } = _CaptchaSender;\nconst { default: Form, Input } = ReactForm;\nconst { App, Flex } = antd;\nconst BaseExample = () => {\n  const { message } = App.useApp();\n  return (\n    <Form>\n      <Flex align=\"top\" gap={10}>\n        <Input name=\"email\" label=\"Email\" realtime rule=\"REQ EMAIL\" />\n        <CaptchaSender\n          target={{ name: 'email' }}\n          onClick={async () => {\n            await new Promise(resolve => {\n              setTimeout(() => {\n                message.success('发送验证码');\n                resolve();\n              }, 1000);\n            });\n          }}>\n          Send\n        </CaptchaSender>\n      </Flex>\n    </Form>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_CaptchaSender\",\n    packageName: \"@kne/current-lib_captcha-sender\",\n    importStatement: \"import * as _CaptchaSender from \\\"@kne/captcha-sender\\\"\",\n    component: component_1\n},{\n    name: \"ReactForm\",\n    packageName: \"@kne/react-form-antd\",\n    component: component_2\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_4\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["window","PUBLIC_URL","process","registry","url","tpl","ExampleRoutes","createEntry","_ref","globalPreset","props","_jsx","HashRouter","children","paths","key","path","title","preset","themeToken","readme","pageProps","menu","root","ReactDOM","document","getElementById","async","ajax","createAjax","errorHandler","error","message","componentsCoreRemote","remote","defaultVersion","remoteLoaderPreset","remotes","default","fetchPreset","loading","Spin","delay","style","position","left","padding","transform","empty","Empty","transformResponse","response","data","code","msg","results","enums","apis","colorPrimary","globalInit","render","App","renderRoot","name","summary","description","packageName","api","example","isFull","className","list","scope","importStatement","component"],"sourceRoot":""}