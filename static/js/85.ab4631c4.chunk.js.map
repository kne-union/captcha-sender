{"version":3,"file":"static/js/85.ab4631c4.chunk.js","mappings":"4LAIA,MCJiE,GAAgBA,cDI5D,CACjBC,KAAM,iBACNC,QAAS,+8EA2CTC,YAAa,iFACbC,YAAa,sBACbC,IAAK,o7EAqELC,QAAS,CACLC,QAAQ,EACRC,UAAW,uBACXC,MAAO,uGAKPC,KAAM,CAAC,CACXC,MAAO,mDACPR,YAAa,mDACbS,KAAM,+vBA6BNC,MAAO,CAAC,CACRZ,KAAM,iBACNG,YAAa,kCACbU,gBAAiB,wDACjBC,U,UACF,CACEd,KAAM,YACNG,YAAa,uBACbW,U,UACF,CACEd,KAAM,OACNG,YAAa,OACbW,U,gBC3KSC,EAAW,CAAC,KAAO,iBAAiB,QAAU,QAAQ,gBAAe,EAAK,aAAa,kBAAkB,QAAU,CAAC,CAAC,KAAO,iBAAiB,QAAU,kDAAkD,YAAc,iFAAgB,YAAc,wB","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_captcha-sender';\nimport * as component_2 from '@kne/react-form-antd';\nimport '@kne/react-form-antd/dist/index.css';\nimport * as component_4 from 'antd';\nconst readmeConfig = {\n    name: `captcha-sender`,\n    summary: `<p><code>CaptchaSender</code> 是一个用于发送验证码的 React 组件，它提供了以下功能：</p>\n<ul>\n<li>与表单系统集成，可以根据表单字段的验证状态控制按钮的可用性</li>\n<li>发送验证码后自动开始倒计时</li>\n<li>在倒计时期间禁用按钮，并显示剩余时间</li>\n<li>支持自定义倒计时时长</li>\n<li>支持自定义按钮文本和样式</li>\n</ul>\n<h3>何时使用</h3>\n<p>当你需要在表单中添加发送验证码功能时，例如：</p>\n<ul>\n<li>用户注册或登录时发送手机验证码</li>\n<li>重置密码时发送邮箱验证码</li>\n<li>需要二次验证的操作</li>\n</ul>\n<h3>基本用法</h3>\n<pre><code class=\"language-jsx\">import CaptchaSender from '@kne/captcha-sender';\nimport Form, { Input } from '@kne/react-form-antd';\n\nconst MyForm = () =&gt; {\n  return (\n    &lt;Form&gt;\n      &lt;Input name=\"email\" label=\"邮箱\" realtime rule=\"REQ EMAIL\" /&gt;\n      &lt;CaptchaSender\n        target={{ name: 'email' }}\n        onClick={async () =&gt; {\n          // 发送验证码的异步操作\n          await sendVerificationCode();\n        }}\n      &gt;\n        发送验证码\n      &lt;/CaptchaSender&gt;\n      &lt;Input name=\"verificationCode\" label=\"验证码\" rule=\"REQ\" /&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre>\n<h3>注意事项</h3>\n<ul>\n<li><code>target</code> 属性用于指定要验证的表单字段，通常是手机号或邮箱字段</li>\n<li><code>onClick</code> 回调函数应返回一个 Promise，如果返回 <code>false</code>，则不会开始倒计时</li>\n<li>默认倒计时时长为 60 秒，可通过 <code>duration</code> 属性自定义</li>\n</ul>`,\n    description: `用于实现一个发送验证码按钮`,\n    packageName: `@kne/captcha-sender`,\n    api: `<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>按钮的内容</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>target</td>\n<td>目标表单字段，用于验证字段是否有效</td>\n<td>{ name: string } | { names: string[] }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击按钮时的回调函数，如果返回 false 则不会开始倒计时</td>\n<td>() =&gt; Promise&lt;any&gt; | false</td>\n<td>-</td>\n</tr>\n<tr>\n<td>duration</td>\n<td>倒计时时长（秒）</td>\n<td>number</td>\n<td>60</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>CSSProperties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>loadingProps</td>\n<td>LoadingButton 的属性</td>\n<td>LoadingButtonProps</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>说明</h3>\n<ol>\n<li>\n<p><code>target</code> 属性用于指定要验证的表单字段，可以是单个字段名或多个字段名的数组。组件会检查这些字段是否通过验证，如果没有通过验证，按钮将被禁用。</p>\n</li>\n<li>\n<p><code>onClick</code> 回调函数应返回一个 Promise，表示验证码发送操作。如果返回 <code>false</code>，则不会开始倒计时。</p>\n</li>\n<li>\n<p>当点击按钮并且 <code>onClick</code> 回调成功执行后，组件会自动开始倒计时，在倒计时期间按钮将被禁用，并显示剩余时间。</p>\n</li>\n<li>\n<p>组件继承了 <code>LoadingButton</code> 的所有属性，因此可以通过 <code>loadingProps</code> 传递 <code>LoadingButton</code> 的属性。</p>\n</li>\n</ol>`,\n    example: {\n        isFull: false,\n        className: `captcha_sender_e3d79`,\n        style: `.captcha_sender_e3d79 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { default: CaptchaSender } = _CaptchaSender;\nconst { default: Form, Input } = ReactForm;\nconst { App, Flex } = antd;\nconst BaseExample = () => {\n  const { message } = App.useApp();\n  return (\n    <Form>\n      <Flex align=\"top\" gap={10}>\n        <Input name=\"email\" label=\"Email\" realtime rule=\"REQ EMAIL\" />\n        <CaptchaSender\n          target={{ name: 'email' }}\n          onClick={async () => {\n            await new Promise(resolve => {\n              setTimeout(() => {\n                message.success('发送验证码');\n                resolve();\n              }, 1000);\n            });\n          }}>\n          Send\n        </CaptchaSender>\n      </Flex>\n    </Form>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_CaptchaSender\",\n    packageName: \"@kne/current-lib_captcha-sender\",\n    importStatement: \"import * as _CaptchaSender from \\\"@kne/captcha-sender\\\"\",\n    component: component_1\n},{\n    name: \"ReactForm\",\n    packageName: \"@kne/react-form-antd\",\n    component: component_2\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_4\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import CaptchaSender from '@components/captcha-sender/README.md';export default {CaptchaSender};\nexport const manifest = {\"name\":\"captcha-sender\",\"version\":\"0.1.1\",\"open-version\":true,\"public-url\":\"/captcha-sender\",\"modules\":[{\"name\":\"captcha-sender\",\"baseDir\":\"/home/runner/work/captcha-sender/captcha-sender\",\"description\":\"用于实现一个发送验证码按钮\",\"packageName\":\"@kne/captcha-sender\"}]};"],"names":["CaptchaSender","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component","manifest"],"sourceRoot":""}